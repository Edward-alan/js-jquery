事件：就是文档或浏览器窗口中发生的一些特定的交互瞬间。
	1、事件流：
    DOM是树形结构，当标签元素产生一个事件的时候，该事件会在元素节点与根节点之间的路径传播，路径所经过的节点都会收到
    该事件，这个传播的过程就叫做dom事件流。
    JS事件流最早要从IE和网景公司的浏览器大战说起，IE提出的是冒泡流，而网景Netscape提出的是捕获流，
    后来在W3C组织的统一之下，JS支持了冒泡流和捕获流，但是目前低版本的IE浏览器还是只能支持
    冒泡流(IE6,IE7,IE8均只支持冒泡流)，所以为了能够兼容更多的浏览器，建议大家使用冒泡流。
    一个完整的JS事件流是从document开始，最后回到document的一个过程,有的浏览器一直冒泡到window
    dom2级事件规范要求从document开始，但是有的浏览器是从window开始的
    dom2级事件流包括3个阶段:事件捕获阶段、处于目标阶段、事件冒泡阶段，首先发生的是事件捕获
    两种事件流：
    1、冒泡
        当一个元素接收到事件时，会把他接收到的所有传播给它的父级
        阻止事件冒泡
        ev.stopPropagation() 兼容谷歌、火狐、ie11及以上
        ev.cancelBubble = true 兼容ie
        if(ev.stopPropagation){
                    ev.stopPropagation();
                }else{
                    ev.cancelBubble = true;
                }
    2、捕获
        先由不具体的元素接收事件，最具体的节点最后才接收到事件。
        由外到内
    事件委托也叫事件代理，利用事件冒泡，
	事件绑定
    1、HTML事件处理程序
        缺点就是html代码和js的耦合性太强，如果哪一天想要改变js中的函数名，那么不但要再js中修改，
        还需要到html中修改。
    2、DOM0级事件处理程序
    3、DOM2级事件处理程序
    标准：addEventLIstener("click",fn1,false) 第三个参数：是否在捕获阶段调用事件处理程序，默认false
    绑定带参数的函数
        addEventListener("click",fn1.bind(this,参数1，参数2...),false)
        按添加事件的顺序执行
    非标准：attachEvent("on"+事件名称,事件函数)ie不支持捕获，所以只会在冒泡阶段调用事件处理程序
            倒序执行
    事件取消
        1、DOM0级
        元素.onclick = null;
        2、DOM2级
        标准：removeEventLIstener() 与添加事件传入参数相同，所以不能移除匿名函数的事件
        非标准：detachEvent()
事件属性
    触发该事件的节点
        ev.target 不支持ie8及以下
        ev.srcElement 不支持火狐
        var obj = ev.target || ev.srcElement
        obj.tagName 触发该事件的标签名称，大写的
     事件类型
        ev.type
	获取鼠标的位置（坐标）
    相对元素  offsetX   offsetY
    相对视口  clientX   clientY
    相对页面  pageX     pageY      
    相对屏幕  screenX   screenY

事件类型
    1、onload 加载完页面中的所有东西才会执行
	2、oninput
	3、onchange
    1、焦点事件
        onfocus()获取焦点
        onblur()失去焦点
    2、鼠标事件
        click
        dbclick
        mouseover:鼠标移入目标元素上方。鼠标移到其后代元素上时会触发。
        mouseenter:鼠标移入元素范围内触发，该事件不冒泡，即鼠标移到其后代元素上时不会触发。
        mousedown:鼠标按钮被按下时触发。
        mousemove:鼠标在元素内部移到时不断触发。
        mouseup:鼠标按钮被释放弹起时触发。
        mouseout:鼠标移出目标元素上方。
        mouseleave:鼠标移出元素范围时触发，该事件不冒泡，即鼠标移到其后代元素时不会触发。

        鼠标事件中的属性
        clientX、clientY当事件被触发时鼠标指针向对于浏览器页面（或窗口）的水平坐标和垂直坐标，相对于可视区的坐标，不会计算滚动条。
        pageX、pageY相对于整个页面的坐标，会算滚动条的，不支持ie8及以下
        如果没有滚动条，两者值相同
        回顾：
        offsetWidth、offsetHeight盒模型的宽度和高度
        offsetLeft、offsetTop
        scrollTop
        
        键盘事件
        1. keydown：当用户按下任意键的时候触发。如果按住不放会重复触发；
        2. keypress：当用户按下键盘上字符键时触发，如果按住不放会重复触发，另外按下esc键也会触发这个事件；
        3. keyup：当用户释放键盘上的键的时候触发。
正则：
		什么是正则表达式
		正则表达式是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，
		这个“规则字符串”用来表达对字符串的一种过滤逻辑
	 通过正则表达式，从字符串中获取我们想要的特定部分
	 创建方式
	 1、字面量创建
			reg = /正则/修饰符
	 2、实例化方式
			reg = new RegExp("正则","修饰符")
	   修饰符可以省略，两种方式区别：第二种可以使用变量,并且\需要使用\\
	  修饰符：
	   i忽略大小写
	   g全局，被应用于所有字符串，而非在发现第一个匹配项时立即停止
	   m 多行
	  常用方法：
	   reg.test(字符串);检测字符串是否匹配某个模式，返回布尔值
	   reg.exec(字符串) 返回字符串中的第一个与正则表达式的内容，如果使用修饰符/g,
	   则第二次打印会从上次查找的地方往后继续查找
	  元字符：有特殊功能的字符叫做元字符
	  \d 表示数字  指的是0-9的数字
	  \D表示非数字
	  \w 表示字母数字、下划线
	  [abc]表示字符集合，匹配包含的任意字符,相当于a或b或c
	 |表示  a|b|c表示a或b或c
	  [a-c]表示范围，例如\d就等价于[0-9],[a-z]匹配a到z的小写字母
	   .除了\n之外的任意一个字符
	   \s空格或空白
	   \S非空格
	   ^ 开始
	   $ 结束
	   ()分组 (1). 在被修饰匹配次数的时候，括号中的表达式可以作为整体被修饰
			(2). 取匹配结果的时候，括号中的表达式匹配到的内容可以被单独得到
	   \转义
	   \b用来设置单词界限。匹配单词（由字母数字或下划线组成的）的开始或结束(匹配开始时，单词之前不能有\w;匹配结束时，单词之后不能有\w
	   写在表达式某个字符或字符串之前，表示此字符或字符串之前不能有\w对应的字符；写在字符后面，表示此字符之后不能有\w对应的字符。 所以\b可以只有一个放在字符前面或后面，也可以有2个（表示字符前后都不能有\w对应的字符）。
	   \1重复
	   [^a]排除除了a
	   量词：
				{n}    匹配n次
				{n,m}  匹配n到m次
				{n,}   匹配至少n次
				+      至少1次
				?      0到1次
				*      0到多次
		字符串常用的方法：
		match()返回匹配的数组，没有结果返回null
		search()第一个与regexp相匹配的子串的起始位置，无结果，返回-1，不执行全局匹配，它将忽略标志 g
函数：
	基本数据类型：
		number、string、boolean、null、undefined
	引用数据类型 object 保存在堆内存中
	只能给引用数据类型的值动态添加属性
	复制变量的值：基本类型是复制具体的值,引用类型复制的是地址值或者称作指针
	传递参数：按值传递
		基本类型的参数传递和基本类型复制变量一样
		引用类型的参数传递和引用类型复制变量一样，传递的是地址值
	检测类型：
		typeof 检测变量是字符串、数值、布尔值、还是undefined
			   检测function  还是function
			   检测null和对象时返回的是object
		typeof用来检测基本数据类型的
		instanceof
		  格式：对象 instanceof 构造函数 返回值boolean类型
		  所有引用类型的值都是Object的实例
		  用来检测引用数据类型
	执行环境与作用域
		执行环境：定义了变量和函数有权访问的其他数据，决定了他们各自的行为，每个环境都有一个与之关联的对象，环境中定义的所有变量和函数都保存在这个对象中
		全局执行环境是最外围的一个执行环境，它的对象就是window
		某个执行环境里面的代码执行完毕后，保存在其中的所有的变量和函数也会随之销毁，全局执行环境直到程序退出
		每个函数都有自己的执行环境
		延长作用域链：
		   with语句、try catch语句、eval
	没有块级作用域,只有全局作用域和函数作用域
	函数提升:只有函数声明时才有函数提升，值和声明都提升，优先级比变量提升高
	变量提升
		只是提升的变量声明
	垃圾收集：
		局部变量：离开执行环境时，自动销毁
		全局变量：手动解除引用或者关闭程序
		自动垃圾回收机制

		垃圾收集方式：
		1、标记清除
			当变量进入环境时，做上标记进入环境，离开环境时标记离开环境
			给当前不使用的值加上标记
		2、引用计数
	递归
		函数调用函数自身,最终要有一个停止的条件
		arguments.callee是一个指向正在执行的函数的指针
		严格模式下("use strict")不能访问arguments.callee
		可以使用：
		var factorial = function f(num){
				if(num<=1){
					return 1;
				}else{
					return num*f(num-1);
				}
			}
	 浅拷贝 只是拷贝了基本类型的数据，而引用类型数据，复制后也是会发生引用，我们把这种拷贝叫做“（浅复制）浅拷贝”。
	 深拷贝：
		复制并创建一个一摸一样的对象，不共享内存，修改新对象，旧对象保持不变。
		JSON.stringify(obj)  对象格式转化成字符串     
		JSON.parse(str) 将字符串转换成对象   
	闭包：   
		有权访问另一个函数作用域中的变量的函数，函数嵌套函数,子函数要使用到父函数局部变量   
		什么是闭包？  
		闭包的应用场景：
		闭包的缺陷:内存泄漏
		闭包就是函数中的函数
		闭包的用途就是可以读取函数内部的变量，让这些变量的值始终保持在内存中
		闭包会影响浏览器的反应速度境地用户体验或造成浏览器无响应
		闭包有可能造成内存泄漏
	let

this
	当前函数执行的上下文（this在函数体中的值），this是在函数调用的时候确定的，不是在定义的时候确定的
	1、函数调用
		函数名()
		自执行函数
		this在函数调用中是一个全局对象，由它的执行环境决定，在浏览器里就是window
		this在所有函数作用域以外调用时，它指向window
	2、方法调用
		this指的是拥有这个方法的对象
	apply()和call()方法
	当函数被.call()或者.apply()调用时，执行的是隐式调用。
	格式：函数.call(this指向, 'value1', 'value2')
	格式：函数.apply(this指向, ['value1', 'value2'])
	它们是函数下面的方法，作用是调用函数，并改变函数中的this指向。
	.call()接受一组参数，例如myFunction.call(thisValue, 'value1', 'value2')
	.apply()接受的一组参数必须是一个类似数组的对象，例如myFunction.apply(thisValue, ['value1', 'value2'])
	bind()
	bind方法传递给调用函数的参数可以逐个列出，也可以写在数组中。bind方法与call、apply最大的不同就是
	前者返回一个绑定上下文的函数，而后两者是直接执行了函数。
	bind ie9及以上才支持

什么是函数式编程
	好处：
	A、语义更加清晰
		B、可复用性更高
		C、可维护性更好
		D、作用域局限，副作用少

	高阶函数：一个函数就可以接收另一个函数作为参数，这种函数就称之为高阶函数。

	1、封装forEach方法
	数组原生的arr.forEach(function(ele, index, array){})函数的三个参数ele,index,array分别是遍历的某一项，下标，数组本身
	对数组中的每一项运行给定函数，这个方法没有返回值
	2、封装map方法
		arr.map(function(ele, index, array){})
		函数的三个参数ele,index,array分别是遍历的某一项，下标，数组本身
		对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组
	3、封装filter方法
		arr.filter(function(ele, index, array){})
		对数组中的每一项运行给定函数，返回该函数会返回true的项组成的数组
		数组的forEach()、map()、filter()特点：
	4、封装reduce方法
		arrayObject.reduce(function(prev,cur,index,array){}, initialValue)
		迭代数组的所有项，然后构建一个最终返回的值。 function：必需，要在每一项上运行的函数；
		initialValue ：可选，作为归并基础的初始值。 prev：每次调用函数返回的值，第一次指的是第一个值；cur：当前值；index：项的索引；
		array:数组本身
		1、只有IE9及以上浏览器支持。自己封装
		2、不修改原数组。

面向对象的编程
	我们把这种有对象，对象下面有属性和方法的这种叫做面向对象。我们把这种形式的叫做面向对象编程。
	对象的组成：
	两部分组成：一部分叫方法，一部分叫属性。
	对象下面的变量：叫做对象的属性
	对象下面的函数 : 叫做对象的方法
	创建对象：
		1、工厂模式
			是一种设计模式，这种模式抽象了创建具体对象的过程，用函数封装了创建对象的细节
			function createPerson(name,age,job){
					var obj = new Object();
					obj.name = name;
					obj.age = age;
					obj.job = job;
					obj.sayName = function(){
						alert(this.name);
					}
					return obj;
				}
				var person1 = createPerson("lily",18,"doctor");
				var person2 = createPerson("lucy",20,"worker");

		2、构造函数
			只要通过new操作符调用的函数，就可以把他当做构造函数，构造函数的名称首字母大写(为了和其他函数区分开)
			构造函数的返回值就是this，只不过不用写
			使用构造函数创建对相关经历了四个步骤：
			function Person(name,age,job){
					this.name = name;
					this.age = age;
					this.job = job;
					this.sayName = function(){
						alert(this.name);
					}
				}
				var person1 = new Person("aa",22,"driver");
				person1.sayName();
				var person1 = new Person("cc",22,"star");
				要创建Person的新实例，必须使用new

			1、创建了一个新对象
			2、将构造函数的作用域赋给了新对象(因此this指向这个新对象)
			3、执行构造函数的代码
			4、返回新对象
			person1和person2分别保存着Person的一个不同的实例

			构造函数的缺点：
			每个方法都要在实例上创建一遍，每定义一个函数就是实例化了一个对象

原型模式：
	我们创建的每个函数都有一个 prototype（原型）属性，这个属性是一个指针，指向一个对象，
	而这个对象的用途是包含可以由特定类型的所有实例共享的属性和方法。prototype 就是通过调用构造函数而创建的那个对象实例的原型对象。使用原型对象的好处是可以
	让所有对象实例共享它所包含的属性和方法。换句话说，不必在构造函数中定义对象实例的信息，而是可以将这些信息直接添加到原型对象中
	function Person(){
	}
	Person.prototype.name = "Nicholas";
	Person.prototype.age = 29;
	Person.prototype.job = "Software Engineer";
	Person.prototype.sayName = function(){
	alert(this.name);
	};
	var person1 = new Person();
	person1.sayName(); //"Nicholas"
	var person2 = new Person();
	person2.sayName(); //"Nicholas"
	alert(person1.sayName == person2.sayName); //true
	constructor属性
	只要创建了一个新函数，就会根据一组特定的规则为该函数创建一个 prototype
	属性，这个属性指向函数的原型对象。在默认情况下，所有原型对象都会自动获得一个 constructor
	（构造函数）属性，这个属性包含一个指向 prototype 属性所在函数的指针。
	Person.prototype. constructor 指向 Person
	创建了自定义的构造函数之后，其原型对象默认只会取得 constructor 属性；至于其他方法，则
	都是从 Object 继承而来的。当调用构造函数创建一个新实例后，该实例的内部将包含一个指针（内部
	属性），指向构造函数的原型对象,这个指针叫做_proto_,这个属性对脚本则是完全不可见的,它存在于实例与构造函数的原型对象之间，
	而不是存在于实例与构造函数之间
	可以通过 isPrototypeOf()方法来确定对象之间是否存在这种关系。从本质上讲，
	如果[[Prototype]](即_proto_)指向调用 isPrototypeOf()方法的对象
	（Person.prototype），那么这个方法就返回 true
	console.log(Person.prototype.isPrototypeOf(p1));//true
	hasOwnProperty()检测是不是对象自身下面的属性，实例对象.hasOwnProperty("属性名");
	只在属性存在于实例中时才返回 true，该属性存在于Object.prototype
	prototype对象更简单的写法：
	Person.prototype = {
			name : "Nicholas",
			age : 29,
			job: "Software Engineer",
			sayName : function(){
				alert(this.name);
			}
		};
	 在原型对象上面定义引用数据类型出现问题
	 所以创建自定义类型的最常见方式，就是组合使用构造函数模式与原型模式。构造函数模式用于定义实
	例属性，而原型模式用于定义方法和共享的属性。
	判断类型：
	arr instanceOf Array
	arr.constructor == Array
	Object.prototype.toString.call(obj)
	Object.prototype.toString.call(arr) === '[object Array]'
	包装对象：
	str是一个字符串，哪它怎么有方法呢？我们说只有对象才有方法的啊。方法前面必须是对象才行的。
	包装对象 : 基本类型都有自己对应的包装对象 : String  Number  Boolean
	但是null undefined它们没有对应的包装对象
	var str = new String('hello');
	alert( typeof str ); // object。
	var str = 'hello';
	str.charAt(0); // 当走这句话时，基本类型会找到对应的包装对象类型，然后包装对象把所有的属性和方法给了基本类型，然后包装对象消失

	原型链作为实现继承的主要方法
	其基本思想是利用原型让一个引用类型继承另一个引用类型的属性和方法。
	构造函数、原型和实例的关系：每个构造函数都有一个原型对象，原型对象都包含一个指向构造函数的指针，
	而实例都包含一个指向原型对象的内部指针。假如我们让原型对象等于另一个类型的实例，结果会怎么样呢？
	显然，此时的原型对象将包含一个指向另一个原型的指针，相应地，另一个原型中也包含着一个指向另一个
	构造函数的指针。假如另一个原型又是另一个类型的实例，那么上述关系依然成立，如此层层递进，就构成了实
	例与原型的链条。这就是所谓原型链的基本概念
	继承 : 子类不影响父类，子类可以继承父类的一些功能 ( 代码复用的一种形式 )。我们之前讲的封装函数，
	还有我们后面讲的组件开发，也都是一种代码复用的一种形式。

原型链：
	每个构造函数都有一个原型对象，原型对象都包含一个指向构造函数的指针，而实例都包含一个指向原型
	对象的内部指针。那么，假如我们让原型对象等于另一个类型的实例，结果会怎么样呢？显然，此时的
	原型对象将包含一个指向另一个原型的指针，相应地，另一个原型中也包含着一个指向另一个构造函数
	的指针。假如另一个原型又是另一个类型的实例，那么上述关系依然成立，如此层层递进，就构成了实
	例与原型的链条。这就是所谓原型链的基本概念。
	注意：
	1、子类型有时候需要重写超类型中的某个方法，或者需要添加超类型中不存在的某个方法。但不管怎
	样，给原型添加方法的代码一定要放在替换原型的语句之后
	2、在通过原型链实现继承时，不能使用对象字面量创建原型方法。因为这
	  样做就会重写原型链
	A.使用原型链继承也叫类式继承
	原型链继承的问题：
	1、包含引用类型值的原型属性会被所有实例共享；而
	这也正是为什么要在构造函数中，而不是在原型对象中定义属性的原因
	2、在创建子类型的实例时，不能向超类型的构造函数中传递参数。实际上，
	  应该说是没有办法在不影响所有对象实例的情况下，给超类型的构造函数传递参数。
	实践中很少会单独使用原型链，一般会有面试题，如何用一话来做到继承，其实说的就是这种继承

借用构造函数:
	如果仅仅是借用构造函数，那么也将无法避免构造函数模式存在的问题——方法都在构造函数中定
	义，因此函数复用就无从谈起了。而且，在超类型的原型中定义的方法，对子类型而言也是不可见的，结
	果所有类型都只能使用构造函数模式。考虑到这些问题，借用构造函数的技术也是很少单独使用的。

原型链和构造函数组合：
	使用原型链实现对原型属性和方法的继承，而通过借用构造函数来实现对实例属性的继承。这样，既通过在原型上定义
	方法实现了函数复用，又能够保证每个实例都有它自己的属性。
	原型链和构造函数组合是最常用的继承模式

原型继承
	Object.create()方法规范化了原型式继承。这个方法接收两个参数：一
	个用作新对象原型的对象和（可选的）一个为新对象定义额外属性的对象。
拷贝继承
	属性和方法分形继承
JSON
    JSON语法可以表示三种类型的值：
    1、简单值：字符串、数值、布尔值和 null，但不支持undefined。
    2、对象
    3、数组
	JSON 不支持变量、函数或对象实例，它就是一种表示结构化数据的格式，虽然与 JavaScript 中表示
	数据的某些语法相同，但它并不局限于 JavaScript 的范畴。
	注意：
	1、不支持变量、函数或对象实例
	2、JSON 字符串必须使用双引号，单引号会报错
	3、JSON 中的对象要求给属性加双引号
	4、没有声明变量
	5、没有末尾的分号
	JSON对象的解析
	   JSON.stringify()、JSON.parse()
	stringify()：除了第一个参数，它还可以接收另外两个参数，这两个参数用于指定以不同的方式序列化 JavaScript 对象。
	第一个参数是个过滤器，可以是一个数组，也可以是一个函数；第二个参数是一个选项，表示是否在 JSON 字符串中
	保留缩进。单独或组合使用这两个参数，可以更全面深入地控制 JSON 的序列化。
	eval()函数可计算某个字符串，并执行其中的的 JavaScript 代码。

ajax
	Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）
	Ajax 技术的核心是 XMLHttpRequest 对象
	是一种请求数据的方式
	Ajax其核心有JavaScript、XMLHTTPRequest、DOM对象组成，通过XmlHttpRequest对象来向服务器发异步请求，
	从服务器获得数据，然后用JavaScript来操作DOM而更新页面。这其中最关键的一步就是从服务器获得请求数据。
	能够以异步方式从服务器取得更多信息，意味着用户单击后，可以不必刷新页面也能取得新数据。
	这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。

好处：
    1.	节省用户操作，时间，提高用户体验，减少数据请求
    2.	传输获取数据
缺点：
    ajax对搜索引擎的支持比较弱。
	影响浏览器的后退按钮
流程：
1、创建对象
	var xhr = new XMLHttpRequest();
	标准: new XMLHttpRequest()
	IE:   new ActiveXObject('Microsoft.XMLHTTP')
2、调用open()方法
	xhr.open(method,url,async)
	xhr.open('get','1.txt',true);
		method：默认是get请求，async默认true
		1、get请求还是post请求2、请求的地址3、是否异步
		get请求和post请求区别：
			1 传输数据体积大小有区别: GET方式最多允许传输2K以里的数据,POST一般没有限制
			2 传递参数的形式上有区别:GET以地址栏参数的方式传递,POST以请求头信息方式传递
			3 安全系数:POST的安全系数较高,get会缓存
			4 GET方式传输速度较快
		异步：非阻塞 前面的代码不会影响后面代码的执行
		同步：阻塞 前面的代码会影响后面代码的执行
		当你后续的代码需要用到前面的东西的时候，就要用同步。（同步用得比较少，因为可以用事件回调的方式解决）
		一般情况下，都是用异步，因为如果我的ajax挂在哪里了，就阻止了我后面的代码的执行。这是很不合理的。

3、send()该方法接收一个参数，即要作为请求主体发送的数据。如果不需要通过请求主体发送数据，则必须传入
null，因为这个参数对有些浏览器来说是必需的。调用 send()之后，请求就会被分派到服务器

属性：
 XHR 对象的 readyState 属性，该属性表示请求/响应过程的当前活动阶段。这个属性可取的值如下。
 0：未初始化。尚未调用 open()方法。
  1：启动。已经调用 open()方法，但尚未调用 send()方法。
  2：发送。已经调用 send()方法，但尚未接收到响应。
  3：接收。已经接收到部分响应数据，或者正在解析数据
  4：完成。已经接收到全部响应数据，而且已经可以在客户端使用了
事件onreadystatechange readyState 属性值发生变化时候触发
responseText：作为响应主体被返回的文本。

xhr.status : 服务器状态，http状态码
status状态
但我们这要进行一个容错处理，因为我们访问后端，不一定每次都能访问成功，比如数据库挂了。请求超时等等。所以要用到服务器状态，即http状态码。

HTTP状态码是用以表示网页服务器HTTP响应状态的3位数字代码。共5大类。
	1开头：消息
	2开头：成功
	3开头：重定向
	4开头：请求错误
	5开头：服务器错误
	200请求成功
	404请求的资源（网页等）不存在
	500内部服务器错误
	301资源（网页等）被永久转移到其它URL
HTTP
中文转码：
encodeURI、encodeURIComponent

跨域
	是指从一个域名的网页去请求另一个域名的资源。比如从www.baidu.com 页面去请求 www.google.com 的资源。
	但是一般情况下不能这么做，它是由浏览器的同源策略造成的，是浏览器对JavaScript施加的安全限制。跨域的严格一
	点的定义是：只要 协议，域名，端口有任何一个的不同，就被当作是跨域
	协议不同:http/https
	端口不同:8080/8081
	所谓同源是指，域名，协议，端口均相同。这里说的js跨域是指通过js在不同的域之间进行数据传输或通信，比如用ajax向一个不同的域请求数据，或者通过js获取页面中不同域的框架中(iframe)的数据。http://www.123.com/index.html 调用 http://www.123.com/server.PHP （非跨域）
	http://www.123.com/index.html 调用 http://www.456.com/server.php （主域名不同:123/456，跨域）
	http://abc.123.com/index.html 调用 http://def.123.com/server.php （子域名不同:abc/def，跨域）
	http://www.123.com:8080/index.html 调用 http://www.123.com:8081/server.php （端口不同:8080/8081，跨域）
	http://www.123.com/index.html 调用 https://www.123.com/server.php （协议不同:http/https，跨域）
	JSONP是解决跨域的一种方式
解决异步方式：
	回调函数
	事件
promise
	ES6 规定，Promise对象是一个构造函数，用来生成Promise实例。
	Promise构造函数接受一个函数作为参数，该函数的两个参数分别是resolve和reject。它们是两个函数，由 JavaScript
	引擎提供，不用自己部署。
	var promise=new Promise(function(resolve,reject){
		if (/* 异步操作成功 */){
			resolve(value);
		  } else {
			reject(error);
		  }
	})
	Promise实例生成以后，可以用then方法分别指定resolved状态和rejected状态的回调函数。
	promise.then(function(value) {
	  // success
	}, function(error) {
	  // failure
	});
	then方法可以接受两个回调函数作为参数。第一个回调函数是Promise对象的状态变为resolved时调用，
	第二个回调函数是Promise对象的状态变为rejected时调用。其中，第二个函数是可选的，不一定要提供。
	这两个函数都接受Promise对象传出的值作为参数。then方法返回的是一个新的Promise实例（注意，不是原来那个
	Promise实例）。因此可以采用链式写法，即then方法后面再调用另一个then方法。
	异步加载：也称为图片的预加载。利用js代码提前加载图片，用户需要时可以直接从本地缓存获取，
	但是会增加服务器前端的压力。这样做可以提高用户的体验，因为同步加载大图片的时候，图片会一层一层的显示处理，
	但是经过预加载后，直接显示出整张图片。但是在图片响应时间上优化不是那么明显。
	Promise.all方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。
	p=Promise.all([p1, p2, p3]);
	（1）只有p1、p2、p3的状态都变成resolve，p的状态才会变成resolve，此时p1、p2、p3的返回值组成一个数组
	，传递给p的回调函数。
	（2）只要p1、p2、p3之中有一个被rejected，p的状态就变成rejected，此时第一个被reject的实例的返回值，
	会传递给p的回调函数。
	Promise.race方法同样是将多个 Promise 实例，包装成一个新的 Promise 实例。
	const p = Promise.race([p1, p2, p3]);
	上面代码中，只要p1、p2、p3之中有一个实例率先改变状态，p的状态就跟着改变。那个率先改变的 Promise 实例的
	返回值，就传递给p的回调函数。











		