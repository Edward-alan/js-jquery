[ZT]Js:正则表达式常用匹配参考手册 
字符描述： 

　　^符号匹配字符串的开头。例如： 
　　　　^abc　与“abc xyz”匹配，而不与“xyz abc”匹配 

　　$符号匹配字符串的结尾。例如： 
　　　　abc$　与“xyz abc”匹配，而不与“abc xyz”匹配。 
　　　　注意：如果同时使用^符号和$符号，将进行精确匹配。例如： 
　　　　　　　^abc$　只与“abc”匹配　　　 

　　*符号匹配０个或多个前面的字符。例如： 
　　　　ab*　可以匹配“ab”、“abb”、“abbb”等 

　　+符号匹配至少一个前面的字符。例如： 
　　　　ab+　可以匹配“abb”、“abbb”、“ab”等。 

　　?符号匹配０个或１个前面的字符。例如： 
　　　　ab?c?　可以且只能匹配“a”、“ab”、“ac”和“abc” 

　　.符号匹配除换行符以外的任何字符。例如： 
　　　　(.)+　匹配除换行符以外的所有字符串 

　　x|y匹配“x”或“y”。例如： 
　　　　abc|xyz　可匹配 “abc”或 “xyz”，而“ab(c|x)yz”匹配 “abcyz”和“abxyz” 

　　{n}匹配恰好n次（n为非负整数）前面的字符。例如： 
　　　　a{2}　可以匹配“aa“，但不匹配“a” 

　　{n,}匹配至少n次（n为非负整数）前面的字符。例如： 
　　　　a{3,}　匹配“aaa”、“aaaa”等，但不匹配“a”和“aa”。 
　　　　注意：a{1,}等价于a+ 
　　　　　　　a{0,}等价于a* 

　　{m,n}匹配至少m个，至多n个前面的字符。例如： 
　　　　a{1,3}　只匹配“a”、“aa”和“aaa”。 
　　　　注意：a{0,1}等价于a? 

　　[xyz]表示一个字符集，匹配括号中字符的其中之一。例如： 
　　　　[abc]　匹配“a”、“b”和“c” 

　　[^xyz]表示一个否定的字符集。匹配不在此括号中的任何字符。例如： 
　　　　[^abc]　可以匹配除“a”、“b”和“c”之外的任何字符 

　　[a-z]表示某个范围内的字符，匹配指定区间内的任何字符。例如： 
　　　　[a-z]　匹配从“a”到“z”之间的任何一个小写字母字符 

　　[^m-n]表示某个范围之外的字符，匹配不在指定范围内的字符。例如： 
　　　　[m-n]　匹配除从“m”到“n”之间的任何字符 

　　\符号是转义操作符。例如： 
　　　　\n　换行符 
　　　　\f　分页符 
　　　　\r　回车 
　　　　\t　制表符 
　　　　\v　垂直制表符 

　　　　\\　匹配“\” 
　　　　\/　匹配“/” 

　　　　\s　任何白字符，包括空格、制表符、分页符等。等价于“[ \f\n\r\t\v]” 
　　　　\S　任何非空白的字符。等价于“^\f\n\r\t\v]” 
　　　　\w　任何单词字符，包括字母和下划线。等价于“[A-Za-z0-9_]” 
　　　　\W　任何非单词字符。等价于“[^A-Za-z0-9_]” 

　　　　\b匹配单词的结尾。例如： 
　　　　　　ve\b　匹配单词“love”等，但不匹配“very”、“even”等 

　　　　\B匹配单词的开头。例如： 
　　　　　　ve\B　匹配单词“very”等，但不匹配“love”等 

　　　　\d匹配一个数字字符，等价于[0-9]。例如： 
　　　　　　abc\dxyz　匹配“abc2xyz”、“abc4xyz”等，但不匹配“abcaxyz”、“abc-xyz”等 

　　　　\D匹配一个非数字字符，等价于[^0-9]。例如： 
　　　　　　abc\Dxyz　匹配“abcaxyz”、“abc-xyz”等，但不匹配“abc2xyz”、“abc4xyz”等 

　　　　\NUM匹配NUM个（其中NUM为一个正整数），引用回到记住的匹配。例如： 
　　　　　　(.)\1　匹配两个连续相同的字符。 

　　　　\oNUM匹配n（其中n为一个小于２５６的八进制换码值）。例如： 
　　　　　　\o011　匹配制表符 

　　　　\xNUM匹配NUM（其中NUM为一个小于２５６的十六进制换码值）。例如： 
　　　　　　\x41　匹配字符“A” 


========================================================= 
========================================================= 


匹配中文字符的正则表达式： [\u4e00-\u9fa5] 

匹配双字节字符(包括汉字在内)：[^\x00-\xff] 

应用：计算字符串的长度（一个双字节字符长度计2，ASCII字符计1） 

String.prototype.len=function(){return this.replace([^\x00-\xff]/g,"aa").length;} 

匹配空行的正则表达式：\n[\s| ]*\r 

匹配HTML标记的正则表达式：/<(.*)>.*<\/\1>|<(.*) \/>/ 

匹配首尾空格的正则表达式：(^\s*)|(\s*$) 

应用：javascript中没有像vbscript那样的trim函数，我们就可以利用这个表达式来实现，如下： 

String.prototype.trim = function() 
{ 
return this.replace(/(^\s*)|(\s*$)/g, ""); 
} 

利用正则表达式分解和转换IP地址： 

下面是利用正则表达式匹配IP地址，并将IP地址转换成对应数值的Javascript程序： 

function IP2V(ip) 
{ 
re=/(\d+)\.(\d+)\.(\d+)\.(\d+)/g //匹配IP地址的正则表达式 
if(re.test(ip)) 
{ 
return RegExp.$1*Math.pow(255,3))+RegExp.$2*Math.pow(255,2))+RegExp.$3*255+RegExp.$4*1 
} 
else 
{ 
throw new Error("Not a valid IP address!") 
} 
} 

不过上面的程序如果不用正则表达式，而直接用split函数来分解可能更简单，程序如下： 

var ip="10.100.20.168" 
ip=ip.split(".") 
alert("IP值是："+(ip[0]*255*255*255+ip[1]*255*255+ip[2]*255+ip[3]*1)) 

匹配Email地址的正则表达式：\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)* 

匹配网址URL的正则表达式：http://([\w-]+\.)+[\w-]+(/[\w- ./?%&=]*)? 

利用正则表达式去除字串中重复的字符的算法程序：[注：此程序不正确，原因见本贴回复] 

var s="abacabefgeeii" 
var s1=s.replace(/(.).*\1/g,"$1") 
var re=new RegExp("["+s1+"]","g") 
var s2=s.replace(re,"") 
alert(s1+s2) //结果为：abcefgi 

我原来在CSDN上发贴寻求一个表达式来实现去除重复字符的方法，最终没有找到，这是我能想到的最简单的实现方法。思路是使用后向引用取出包括重复的字符，再以重复的字符建立第二个表达式，取到不重复的字符，两者串连。这个方法对于字符顺序有要求的字符串可能不适用。 

得用正则表达式从URL地址中提取文件名的javascript程序，如下结果为page1 

s="http://www.9499.net/page1.htm" 
s=s.replace(/(.*\/){0,}([^\.]+).*/ig,"$2") 
alert(s) 

利用正则表达式限制网页表单里的文本框输入内容： 

用正则表达式限制只能输入中文：onkeyup="value=value.replace(/[^\u4E00-\u9FA5]/g,'')" onbeforepaste="clipboardData.setData('text',clipboardData.getData('text').replace(/[^\u4E00-\u9FA5]/g,''))" 

用正则表达式限制只能输入全角字符： onkeyup="value=value.replace(/[^\uFF00-\uFFFF]/g,'')" onbeforepaste="clipboardData.setData('text',clipboardData.getData('text').replace(/[^\uFF00-\uFFFF]/g,''))" 

用正则表达式限制只能输入数字：onkeyup="value=value.replace(/[^\d]/g,'') "onbeforepaste="clipboardData.setData('text',clipboardData.getData('text').replace(/[^\d]/g,''))" 

用正则表达式限制只能输入数字和英文：onkeyup="value=value.replace(/[\W]/g,'') "onbeforepaste="clipboardData.setData('text',clipboardData.getData('text').replace(/[^\d]/g,''))" 