(function(window) {
    var jQuery = function(selector, context) {
        return new jQuery.prototype.init(selector, context);
    };
    jQuery.fn = jQuery.prototype = {
        constructor: jQuery,
        /**
         * @func[基本方法]
         */
        init: function(selector, context) {
            var that = this;
            context = context || document;
            context = context.nodeType ? context : context[0];
            this.length = 0;
            if (!selector) return this;
            if (typeof selector === "string") {
                if (selector[0] === "<" && selector.length >= 3 && selector[selector.length - 1] === ">") {
                    var oDiv = document.createElement("div");
                    oDiv.innerHTML = selector;
                    this[0] = oDiv.firstChild || oDiv.firstElementChild;
                    this.length = 1;
                } else if (selector[0] === "#" && this.strNum(selector, "#") === 1 && this.strNum(selector, " ") === 0) {
                    var dom = context.getElementById(selector.slice(1));
                    if (dom) {
                        this[0] = dom;
                        this.length = 1;
                    }
                } else {
                    var eles = context.querySelectorAll(selector);
                    for (var i = 0; i < eles.length; i++) {
                        this.push(eles[i]);
                    }
                }
            } else if (selector.nodeType) {
                this[0] = selector;
                this.length = 1;
            } else if (selector instanceof jQuery) {
                return selector;
            } else {
                return this;
            }
        },
        strNum: function(str, char) {
            var count = 0;
            for (var i = 0; i < str.length; i++) {
                if (str[i] === char) {
                    count++;
                }
            }
            return count;
        },
        push: function(content) {
            Array.prototype.push.call(this, content)
        },
        get: function(index) {
            return this[index];
        },
        eq: function(index) {
            return jQuery(this.get(index));
        },
        each: function(fn) {
            for (var i = 0; i < this.length; i++) {
                fn.call(this[i], i, this[i])
            }
            return this;
        },

        /**
         * @func[属性的获取与设置]
         */
        html: function(content) {
            //判断是否传参或者参数的类型
            if (content || typeof content === "string") {
                //如果传参就是设置html
                this.each(function(k, v) {
                    v.innerHTML = content;
                })
                return this;
            } else {
                //如果没传参则是获取html
                return this[0].innerHTML;
            }
        },
        text: function(content) {
            if (content || typeof content === "string") {
                this.each(function(k, v) {
                    v.innerText = content;
                })
                return this;
            } else {
                return this[0].innerText;
            }
        },
        val: function(text) {
            if (text || typeof text === "string") {
                this.each(function(k, v) {
                    v.value = text;
                })
                return this;
            } else {
                return this[0].value;
            }
        },
        css: function(pName, pValue) {
            if (arguments.length === 2) {
                this.each(function(k, v) {
                    v.style[pName] = pValue;
                })
                return this;
            } else if (arguments.length === 1) {
                if (typeof pName === "string") {
                    return getComputedStyle(this[0])[pName];
                } else {
                    for (var key in pName) {
                        this.each(function(k, v) {
                            v.style[key] = pName[key];
                        })
                    }
                    return this;
                }
            }
        },
        attr: function(pName, pValue) {
            if (pValue) {
                this.each(function(k, v) {
                    v.setAttribute(pName, pValue)
                })
                return this;
            } else {
                return this[0].getAttribute(pName);
            }
        },
        /**
         * @func[添加/删除节点]
         */
        append: function(childNode) {
            var child = jQuery(childNode)[0]; //将传入的参数转化为DOM节点;
            this.each(function(k, v) {
                v.appendChild(child.cloneNode(true));
            });
            return this;
        },
        prepend: function(childNode) {
            var child = jQuery(childNode)[0];
            this.each(function(k, v) {
                v.insertBefore(child.cloneNode(true), v.firstChild);
            });
            return this;
        },
        appendTo: function(parentNode) {
            var that = this;
            var parent = jQuery(parentNode);
            parent.each(function(k, v) { //v是DOM元素;
                v.appendChild(that[0].cloneNode(true));
            })
            return this;
        },
        prependTo: function(parentNode) {
            var that = this;
            var parent = jQuery(parentNode);
            parent.each(function(k, v) {
                v.insertBefore(that[0].cloneNode(true), v.firstChild);
            })
            return this;
        },
        remove: function() {
            if (this.length === 0){ return this;
            var parent = this[0].parentNode;
            this.each(function(k, v) {
                parent.removeChild(v);
            })
            }
            return this;
        },
        /**
         * @func[事件方法]
         */
        addClass: function(cName) {
            var that = this;
            cName = cName.split(" ");
            cName.forEach(function(item) {
                that.each(function(k, v) {
                    v.classList.add(item);
                })
            })
            return this;
        },
        removeClass: function(cName) {
            var that = this;
            cName = cName.split(" ");
            cName.forEach(function(item) {
                that.each(function(k, v) {
                    v.classList.remove(item);
                })
            })
            return this;
        },
        hasClass: function(cName) {
            if (this[0].className.indexOf(cName) > -1) {
                return true;
            }
            return false;
        },
        on: function(type) {
            var that = this;
            var arg = arguments[1];
            if (arguments.length === 2) {
                this.each(function(k, v) {
                    v.addEventListener(type, arg, false);
                })
            } else if (typeof arguments[1] === "string" && arguments.length === 3) {
                var callback = arguments[2];
                var eventDom = $(arguments[1], this[0]);
                eventDom.each(function(k, item) {
                    if (!(typeof item.eventTar === "object")) {
                        item.eventTar = {};
                    };
                    if (!(item.eventTar[type] instanceof Array)) {
                        item.eventTar[type] = [];
                    };
                    item.eventTar[type].push(callback);
                })

                function run(e) {
                    if (e.target.eventTar) {
                        e.target.eventTar[type] && e.target.eventTar[type].forEach(function(fn, index) {
                            fn.call(e.target, e);
                        })
                    }
                };
                if (!this[0].bool) {
                    this[0].addEventListener(type, run, false);
                    this[0].bool = true;
                }
            }
            return this;
        },
        off: function(type) {
            if (type) {
                this.each(function(k, v) {
                    v.eventTar[type] = null;
                })
            } else {
                this.each(function(k, v) {
                    v.eventTar = null;
                })
            }
            return this;
        },
        /**
         * @func[查找节点]
         */
        index: function() {
            var that = this;
            var ind;
            var child = Array.from(this[0].parentNode.children);
            child.forEach(function(item, index) {
                if (item === that[0]) {
                    ind = index;
                }
            })
            return ind;
        },
        siblings: function() {
            var that = this;
            var child = Array.from(this[0].parentNode.children);
            var el = jQuery();
            child.forEach(function(item, index) {
                if (item !== that[0]) {
                    el.push(item);
                }
            })
            return el;
        },
        parent: function() {
            return jQuery(this[0].parentNode);
        },
        parents: function(strParent) {
            var tarParent = jQuery(strParent)[0]; //定义一个要查找的目标
            var that = this[0];
            var el = jQuery();
            while (that.parentNode) {
                that = that.parentNode;
                if (that.nodeType !== 9) {
                    el.push(that);
                }
            };
            if (strParent) { //判断是否传入参数
                el.each(function(k, v) {
                    if (v === tarParent) {
                        el = jQuery(v);
                    }
                })
            };
            return el;
        },
        children: function(string) {
            var tarChild = jQuery(string)[0]; //目标元素
            var that = this;
            var el = jQuery();
            this.each(function(index, item) {
                that = item;
                console.log(that);
                while (that.children) {
                    that = Array.from(that.children);
                    that.forEach(function(v, i) {
                        if (that.nodeType !== 9) {
                            el.push(v);
                        }
                    })
                }
            });
            if (string) {
                el.each(function(k, v) {
                    if (v === tarChild) {
                        el.push(v);
                    }
                })
            };
            return el;
        },
        prev: function() {
            return jQuery(this[0].previousElementSibling);
        },
        next: function() {
            return jQuery(this[0].nextElementSibling);
        },
        prevAll: function() {
            var prevs = this[0].previousElementSibling;
            var el = jQuery();
            while (prevs) {
                el.push(prevs);
                prevs = prevs.previousElementSibling;
            }
            return el;
        },
        nextAll: function() {
            var nexts = this[0].nextElementSibling;
            var el = jQuery();
            while (nexts) {
                el.push(nexts);
                nexts = nexts.nextElementSibling;
            }
            return el;
        },
        /**
         * @func[动画及效果]
         */
        hide: function() {
            this.each(function(k, v) {
                v.style.display = "none";
            })
        },
        show: function() {
            this.each(function(k, v) {
                v.style.display = "block";
            })
        },
        toggle: function() {
            this.each(function(k, v) {
                var displayStyle = getComputedStyle(v, null).display;
                v.style.display = displayStyle === "block" ? "none" : "block";
            })
        },
        /**
         * @func[获取元素尺寸]
         */
        innerWidth: function() {
            return this[0].clientWidth;
        },
        innerHeight: function() {
            return this[0].clientHeight;
        },
        outerWidth: function(deep) {
            var oStyle = getComputedStyle(this[0]);
            var lw = parseFloat(oStyle.marginLeft);
            var rw = parseFloat(oStyle.marginRight);
            deep = deep ? lw + rw : 0;
            return this[0].offsetWidth + deep;
        },
        outerHeight: function(deep) {
            var oStyle = getComputedStyle(this[0]);
            var tw = parseFloat(oStyle.marginTop);
            var bw = parseFloat(oStyle.marginBottom);
            deep = deep ? tw + bw : 0;
            return this[0].offsetHeight + deep;
        },
    };
    jQuery.prototype.init.prototype = jQuery.prototype;
    window.$ = window.jQuery = jQuery;
})(window)