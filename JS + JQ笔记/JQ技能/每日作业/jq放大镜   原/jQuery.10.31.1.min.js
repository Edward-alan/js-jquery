/*
 * @Author: 李想 
 * @Date: 2018-10-30 19:52:19 
 * @Last Modified by: 李想
 * @Last Modified time: 2018-11-16 15:50:16
 */
(function(window) {
    var jQuery = function(selector, context) {
        return new jQuery.prototype.init(selector, context); //无new化实例对象
    }
    jQuery.from = function(arr) { //将伪数组转为数组
        return Array.prototype.slice.call(arr);
    }
    window.$ = window.jQuery = jQuery; //使之全局（自执行函数执行之后自动销毁变量）
    jQuery.fn = jQuery.prototype = { //fn懒人写法
        init: function(selector, context) {
            var that = this;
            context = context || document; //限制范围查找时，如果没有指定范围便使用全局范围
            context = context.nodeType ? context : context[0]; //判断content是否是dom对象，如果不是转为dom对象
            this.length = 0; //给长度赋初始值
            if (!selector) { //判断selector是否为空
                return this;
            }
            if (typeof selector === "string") { //判断selector是否是字符串
                if (selector[0] === "<" && selector.length >= 3 && selector[selector.length - 1] === ">") { //判断selector是否是HTML元素
                    var oDiv = document.createElement("div"); //创建容器
                    oDiv.innerHTML = selector; //容器内放要创建的元素
                    this[0] = oDiv.firstChild || oDiv.firstElementChild; //把创建的元素放在实例对象内
                    this.length = 1; //手动修改长度
                } else if (selector[0] === "#" && this.strNum(selector, '#') === 1 && this.strNum(selector, " ") === 0) { //使用id查找节点
                    var dom = document.getElementById(selector.slice(1)); //查找节点，slice减掉#
                    if (dom) { //判断dom是否找到了
                        this[0] = dom;
                        this.length = 1;
                    }
                } else {
                    var eles = context.querySelectorAll(selector); //查找所有元素
                    for (var i = 0; i < eles.length; i++) {
                        this.push(eles[i]); //将查找到的元素放进实例对象
                    }
                }
            } else if (selector.nodeType) { //判断是否为dom节点，如果是直接添加，将dom节点转为jq对象
                this[0] = selector;
                this.length = 1;
            } else if (selector instanceof jQuery) { //判断selector是否是jQuery对象，如果是直接返回，将实例转为jq对象
                return selector;
            } else {
                return this;
            }
        },
        strNum: function(str, char) { //查找某个字符在字符串里出现的次数
            var count = 0;
            for (var i = 0; i < str.length; i++) {
                if (str[i] === char) {
                    count++;
                }
            }
            return count;
        },
        push: function(content) { //封装push方法
            Array.prototype.push.call(this, content);
        },
        get: function(index) { //将jQuery对象转换为dom对象
            return this[index];
        },
        eq: function(index) { //根据索引值查找
            return jQuery(this.get(index));
        },
        siblings: function() { //查找兄弟节点（不包含本身）
            var that = this;
            var children = jQuery.from(this[0].parentNode.children); //获取当前节点父节点的子元素并转为数组
            var el = jQuery(); //定义空jq对象贮存兄弟jq对象
            children.forEach(function(item, i) { //遍历父节点的子元素，判断当前元素是否等于其中的子元素，如果不等于，返回其他子元素
                if (item != that[0]) {
                    el.push(item); //将返回的子元素push进空对象中返回给init原型对象
                }
            })
            return el;
            return this;
        },
        index: function() { //获取当前元素的下标
            var that = this;
            var children = jQuery.from(this[0].parentNode.children); //获取当前节点的父节点的子元素并转为数组
            var i; //定义一个变量接收下标
            children.forEach(function(item, index) { //遍历父节点的子元素判断当前调用方法的元素是否与其中的子元素相等，如果想等，返回下标
                if (that[0] === item) {
                    i = index;
                }
            })
            return i;
            return this;
        },
        html: function(content) { //设置或者获取html内容
            if (content || typeof content == 'string') {
                this.each(function(i, item) {
                        item.innerHTML = content;
                    })
                    //this[0].innerHTML = content;
            } else {
                return this[0].innerHTML;
            }
            return this;
        },


        val: function(string) {
            if (typeof content == 'string') {
                return this[0].value = content;
            } else {
                return this[0].value;
            }
        },

        each: function(fn) { //循环遍历
            for (var i = 0; i < this.length; i++) {
                fn.call(this[i], i, this[i])
            }
            return this;
        },
        css: function(proname, provalue) { //获取或者设置css样式
            if (arguments.length === 2) { //判断参数个数是否为2，如果是两个参数给当前对象设置css
                this.each(function(i, j) {
                    j.style[proname] = provalue;
                });
                return this;
            } else {
                if (typeof proname === "string") { //当有一个参数的时候，判断当前参数是否为字符串，如果是字符串，获取css属性
                    return getComputedStyle(this[0]).css(proname);
                } else { //如果是对象，遍历对象添加css属性
                    for (var k in proname) {
                        this.each(function(i, item) {
                            item.style[k] = proname[k]
                        })
                    }
                }
            }
            return this;
        },
        css1: function() {
            if (this[0].length === 0) return this;
            var str = "";
            if (arguments.length > 1) {
                var arg = [...arguments];
                str += arg[0] + ":" + arg[1] + ";";
            } else if (typeof arguments[0] === "object") {
                var obj = arguments[0];
                for (var k in obj) {
                    str += k + ":" + obj[k] + ";";
                }
            }
            this[0].style.cssText = str;
        },
        attr: function(proname, provalue) { //设置或者获取HTML属性
            if (provalue) {
                this.each(function(i, j) {
                    j.setAttribute(proname, provalue);
                })
                return this;
            } else {
                return this[0].getAttribute(proname);
            }
        },
        append: function(childNode) { //向队尾添加节点
            var child = null; //定义空对象存储
            if (childNode.nodeType) { //判断是否是dom节点，如果是直接添加，若不是转换为dom节点添加
                child = childNode;
            } else if (childNode instanceof jQuery) {
                child = childNode[0];
            }
            this.each(function(i, item) { //循环遍历实例对象
                if (typeof childNode == 'string') {
                    item.innerHTML += childNode;
                } else {
                    item.appendChild(child.cloneNode(true)) //将节点先克隆然后添加进每一个实例对象
                }
            })
            return this;
        },

        prepend: function(childNode) { //向队首添加节点
            var child = null; //定义空对象存储节点
            if (childNode.nodeType) { //判断参数是否是dom节点若是直接添加，若不是转换为dom节点添加
                child = childNode;
            } else if (childNode instanceof jQuery) {
                child = childNode[0];
            }
            this.each(function(i, item) { //如上
                item.insertBefore(child.cloneNode(true), item.firstChild)
            })
            return this;
        },
        prependTo: function(parent) { //向指定节点前添加节点
            var that = this;
            parent.each(function(i, item) { //遍历指定的节点向前添加
                item.insertBefore(that[0].cloneNode(true), item.firstChild);
            })
            return this;
        },
        appendTo: function(parent) { //同理如上
            var that = this;
            parent[0].each(function(i, item) {
                item.appendChild(that[0].cloneNode(true));
            });
            return this;
        },
        addClass: function(cName) { //向指定实例对象添加类名
            var that = this;
            cName = cName.split(" "); //多个类名要添加以空格分割遍历
            cName.forEach(function(cssName) {
                that.each(function(i, item) { //遍历实例对象向每一个实例对象添加类名
                    item.classList.add(cssName);
                })
            })
            return this;
        },
        removeClass: function(cName) { //给指定的实例对象删除类名
            this.each(function(i, item) { //遍历实例对象删除类名
                item.classList.remove(cName);
            })
            return this;
        },
        toggleClass: function(cname) {
            var that = this;
            var cns = this[0].className.split(" ");
            if (cns.indexOf(cname) > -1) {
                that.removeClass(cname);
            } else {
                that.addClass(cname);
            }

            // if (this[0].className == cname) {
            //     this.removeClass(item);
            // } else {
            //     this.addClass(cname);
            // }
            return this;
        },
        /**
         * [on description]
         *@func   [事件模块]
         */
        on: function(type) { //on事件模块的封装
            var arg = arguments; //定义伪数组接受参数
            arg = Array.prototype.slice.call(arguments, 1); //截取数组，去掉事件类型
            var str, //定义变量存储参数
                callback;
            arg.forEach(function(item) { //遍历数组将参数赋值给变量，（判断变量是否是字符串、函数、对象）
                typeof item === 'string' ? str = item : typeof item === 'function' ? callback = item : item.toString() === "[object Object]" ?
                    data = item : null;
            })

            function run(e) { //e是事件对象
                if (str) { //判断是否存在事件委托子节点，如果存在遍历实例对象并判断事件源与参数子节点是否相等
                    $(str, this).each(function(i, item) {

                        if (e.target === item) {
                            callback && callback.call(e.target, e);
                            return;
                        }
                    })
                } else { //如果不存在事件委托子节点直接做事件处理，call使this指向实例对象
                    callback && callback.call(this, e)
                }
            }
            if (str) { //判断是否存在事件委托子节点，如果存在直接给父节点绑定事件，如果没有遍历前面的实例对象给每一个绑定事件
                this[0]["on" + type] = run;
            } else {
                this.each(function(i, item) {
                    item["on" + type] = run;
                })
            }
            return this;
        },
        innerWidth: function() { //内宽模块
            var oStyle = getComputedStyle(this[0]); //定义变量存储要获取css属性的dom节点
            var lw = parseFloat(oStyle.borderLeftWidth); //定义两个变量存储获取的左右宽,并转换为数值
            var rw = parseFloat(oStyle.borderRightWidth);
            return this[0].offsetWidth - lw - rw //最终实例对象的内宽等于自身的offsetWidth减去左右边宽(不包含边框)
        },
        innerHeight: function() { //同理如上
            var oStyle = getComputedStyle(this[0]);
            var tw = parseFloat(oStyle.borderTopWidth);
            var bw = parseFloat(oStyle.borderBottomWidth);
            return this[0].offsetWidth - tw - bw
        },
        outerWidth: function(deep) { //deep传true或不传(外宽)
            var oStyle = getComputedStyle(this[0]); //同理如上
            var lm = parseFloat(oStyle.marginLeft);
            var rm = parseFloat(oStyle.marginRight);
            if (deep) { //判断是否传true,如果有就包含margin宽
                return this[0].offsetWidth + lm + rm; //最终外宽等于本身的宽度加上左右margin宽
            } else { //如果没有传true,直接返回本身的宽
                return this[0].offsetWidth;
            }
        },
        outerHeight: function(deep) { //同理如上
            var oStyle = getComputedStyle(this[0]);
            var tm = parseFloat(oStyle.marginTop);
            var bm = parseFloat(oStyle.marginBottom);
            if (deep) {
                return this[0].offsetHeight + tm + bm;
            } else {
                return this[0].offsetHeight;
            }
        },
        off: function(type) { //删除事件模块,type为要删除的事件类型
            this.each(function(i, item) { //遍历实例对象让每一个对象的事件等于空(删除)
                item["on" + type] = null;
            })
            return this;
        },
        find: function() { //查找后代元素
            var that = this[0];
            var el = jQuery();

            function add(parent) { //递归函数层层向下找
                if (parent.children.length) {
                    Array.from(parent.children).forEach(function(val) { //遍历当前节点的子节点，将子节点添加入el，调用自己循环找
                        el.push(val)
                        add(val);
                    })
                }
            }
            add(that)
            return el;
        },
        parent: function() { //查找父节点
            return this[0].parentNode;
        },
        parents: function(string) { //查找祖先元素
            var str = jQuery(string) //将传入的父节点转换为jQuery对象赋值给str
            var that = this[0];
            var father = this[0].parentNode; //定义变量存储当前对象的父元素
            var el = jQuery(); //定义空jq对象接受父元素
            while (that.parentNode) { //while循环找祖先元素
                that = that.parentNode; //如果一直有父元素，将父元素赋值给that
                if (that.nodeType !== 9) { //判断父元素是否为document元素如果不是放进el
                    el.push(that);
                }
            }
            if (string) { //判断是否传参，如果有参数遍历el对象，如果想找的元素等于el中的元素添加进el
                el.each(function(i, item) {
                    if (str[0] === item) {
                        el = jQuery(item)
                    }
                })
            }
            return el;
        },

        children: function(string) { //查找祖先元素
            var str = jQuery(string) //将传入的父节点转换为jQuery对象赋值给str
            var that = this[0];
            var father = this[0].children; //定义变量存储当前对象的父元素
            var el = jQuery(); //定义空jq对象接受父元素
            while (that.children) { //while循环找祖先元素
                that = [...that.children];
                that.forEach(function(item, i) {
                        if (item !== 9) { //判断父元素是否为document元素如果不是放进el
                            el.push(item);
                        }
                    }) //如果一直有父元素，将父元素赋值给that

            }
            if (string) { //判断是否传参，如果有参数遍历el对象，如果想找的元素等于el中的元素添加进el
                el.each(function(i, item) {
                    if (str[0] === item) {
                        el = jQuery(item)
                    }
                })
            }
            return el;
        },
        hide: function() { //元素隐藏效果
            this.each(function(i, item) {
                item.style.display = "none";
            })
        },
        show: function() { //元素显示
            this.each(function(i, item) {
                item.style.display = "block";
            })
        },
        toggle: function() { //显示/隐藏切换，判断display值
            this.each(function(i, item) {
                var dis = getComputedStyle(item, null).display;
                item.style.display = dis === "block" ? "none" : "block";
            })
        },
        hasClss: function(selector) { //判断一个元素是否有某一个class名
            var className = " " + selector + " ",
                l = this.length;
            for (var i = 0; i < l.length; i++) {
                if (this[i].nodeType === 1 && (" " + this[i].className + " ").replace("/\t\r\n/" / g, " ").indexOf(className) > -1) {
                    return true;
                }
            }
            return false;
            return this;
        },
        slideUp: function(time) { //手风琴向上拉起效果
            time = time || 400;
            if (typeof time === "string") {
                time = time === 'slow' ? 600 : time === 'fast' ? 200 : 400;
            }
            this.each(function(i, item) {
                item.style.overflow = 'hidden';
                var totalH = item.offsetHeight;
                var cH = totalH;
                var step = totalH / (time / 10);
                var timer = setInterval(function() {
                    cH = cH - step;
                    item.style.height = cH + 'px';
                    if (cH <= 0) {
                        clearInterval(timer);
                        item.style.display = "none";
                        item.style.height = totalH + 'px';
                    }
                }, 10)
            })
            return this;
        },
        slideUp1: function(time) {
            time = time || 400;
            if (typeof time === 'string') {
                time = time === "slow" ? 600 : time === "fast" ? 200 : 400;
            }
            this.each(function(i, item) {
                item.style.overflow = "hidden";
                var totalH = item.offsetHeight;
                var cH = totalH;
                var step = totalH / (time / 10);
                var timer = setInterval(function() {
                    cH = cH - step;
                    item.style.height = cH + 'px';
                    if (cH <= 0) {
                        clearInterval(timer);
                        item.style.display = "none";
                        item.style.height = totalH + 'px';
                    }
                }, 10)
            })
            return this;
        },
        slideDown: function(time) { //手风琴向下展开效果
            time = time || 400;
            if (typeof time === 'string') {
                time = time === 'slow' ? 600 : time === 'fast' ? 200 : 400;
            }
            this.each(function(i, item) {
                item.style.display = "block";
                var totalH = item.offsetHeight;
                item.style.height = 0;
                var cH = 0;
                var step = totalH / (time / 10);
                var timer = setInterval(function() {
                    cH = cH + step;
                    item.style.height = cH + 'px';
                    if (cH >= totalH) {
                        clearInterval(timer);
                        item.style.height = totalH + 'px';
                    }
                }, 10)
            })
            return this;
        },
        slideToggle: function(time) { //手风琴拉起/展开切换
            this.each(function(i, item) {
                var dis = getComputedStyle(item).display;
                if (dis === "block") {
                    $(item).slideUp(time);
                } else {
                    $(item).slideDown(time);
                }
            })
            return this;
        },
        prev: function() { //查找当前元素前面的兄弟元素
            return jQuery(this[0].previousElementSibling);
        },
        prevAll: function() { //查找当前元素前面所有的兄弟元素
            var a = jQuery();
            var p = this[0].previousElementSibling;
            while (p) {
                if (p.nodeType === 1) {
                    a.push(p);
                }
                p = p.previousElementSibling;
            }
            return a;
        },
        next: function() { //查找当前节点下一个兄弟节点
            return jQuery(this[0].nextElementSibling);
        },
        nextAll: function() { //查找当前节点后面所有的兄弟节点
            var a = jQuery();
            var p = this[0].nextElementSibling;
            while (p) {
                if (p.nodeType === 1) {
                    a.push(p);
                }
                p = p.nextsElementSibling;
            }
            return a;
        },
        remove: function() { //删除当前节点，先找父元素父元素的removeChild删除
            var parent = this[0].parentNode;
            this.each(function(i, item) {
                parent.removeChild(item);
            })
            return this;
        },
        prop: function() { //同attr
            var arg = [...arguments];
            if (arg.length === 2) {
                this.each(function(i, item) {
                    item[arg[0]] = arg[1];
                })
                return this;
            } else {
                return this[0][arg[0]]
            }
        },
        scroll: function() {
            var scrollT;
            if (window.pageYOffset) {
                scrollT = window.pageYOffset;
            } else if (document.compatMode) {
                scrollT = document.documentElement.compatMode;
            } else if (document.body) {
                scrollT = document.body.scrollTop;
            }
            return scrollT;
        },
        getCss: function(ele, attr) {
            if (typeof getComputedStyle == "function") {
                return parseFloat(getComputedStyle(ele, null)[attr]);

            } else {
                if (attr === "opacity") {
                    var filter = ele.currentStyle.filter;
                    var reg = /alpha\(opacity=(\d+(\.\d+)?)\)/;
                    if (reg.test(filter)) {
                        return parseFloat(RegExp.$1) / 100;
                    } else {
                        return 1;
                    }
                } else {
                    return parseFloat(ele.cuurentStyle(attr));
                }
            }
        },
        setCss: function(ele, attr, val) {
            switch (attr) {
                case "opacity":
                    ele.style.opacity = val;
                    ele.style.filter = "alpha(opacity='+val*100+')";
                case "top":
                case "left":
                case "height":
                case "width":
                    ele.style[attr] = val + "px";
                case "float":
                    ele.style.cssStyle = val + "px";
                    ele.style.typeStyle = val + "px";
                default:
                    ele.style[attr] = val;
            }
        },
        animate: function(obj, speed, callback) {
            var that = this;
            var begin = {},
                change = {};
            var flag = 0;
            for (var k in obj) {
                var target = obj[k];
                var start = that.getCss(that[0], k);
                var changes = target - start;
                if (changes) {
                    begin[k] = start;
                    change[k] = changes;
                    flag++;
                }
            }
            if (flag == 0) return this;
            var interval = 13;
            var times = 0;
            clearInterval(that[0], timer)

            function step() {
                times += interval;
                if (times >= speed) {
                    for (var k in obj) {
                        var target = obj[k];
                        that.setCss(that[0], k, target)
                    }
                    clearInterval(that[0], timer);
                    that[0].timer = null;
                    if (callback) {
                        callback.call(that[0])
                    }
                } else {
                    for (var k in obj) {
                        var start = begin[k];
                        var changes = change[k];
                        var val = times / speed * changes + start;
                        that.setCss(that[0], k, val);
                    }
                }
            }
            that[0].timer = setInterval(step, interval);
        },
        offset: function() {
            var l = this[0].offsetLeft;
            var t = this[0].offsetTop;
            var p = this[0].offsetParent;
            while (p) {
                l += p.offsetLeft + p.clientLeft;
                t += p.offsetTop + p.clientTop;
                p = p.offsetParent;
            }
            return { left: l, top: t }
        }
    };
    jQuery.ajax = function(options) {
        var defobj = {
            url: "",
            method: "get",
            async: true,
            type: "urlrncode",
            data: "null",
            success: function() {

            },
            error: function() {

            }
        };
        options = this.extend({}, defobj, options);
        var params = this.fromsParams(options.data)
        var xhr = window.XMLHttpRequest ? new window.XMLHttpRequest() : new ActiveXObject('Microsoft.XMLHTTP');
        //建立连接
        if (options.method.toLowerCase() == 'get') { //请求为get 需要请求参数放到地址栏
            xhr.open(options.method, options.url + '?' + params, options.async);
            xhr.send(null);
        } else if (options.method.toLowerCase() == 'post') { //请求为post
            xhr.open(options.method, options.url, options.async);
            if (options.type === 'urlencoded') { //请求
                xhr.setRequestHeader('Content-type', 'application/x-www-form-urlencoded')
            } else if (options.type === 'json') {
                xhr.setRequestHeader('Content-type', 'application/json')

            }
            xhr.send(params)
        };
        //获取AJAX里返回的数据
        xhr.onreadystatechange = function() {
            if (xhr.readyState === 4 && xhr.status === 200) {
                options.success(xhr.responseText)
            } else {
                options.error();
            }
        };
    };
    jQuery.ajax1 = function(options) {
        var defobj = {
            url: "",
            method: "get",
            async: true,
            type: "urlrncode",
            data: "null",
            success: function() {

            },
            error: function() {

            }
        };
        options = this.extend({}, defobj, options);
        var params = this.fromsParams(options.data)
        var xhr = window.XMLHttpRequest ? new window.XMLHttpRequest() : new ActiveXObject('Microsoft.XMLHTTP');
        //建立连接
        if (options.method.toLowerCase() == 'get') { //请求为get 需要请求参数放到地址栏
            xhr.open(options.method, options.url + '?' + params, options.async);
            xhr.send(null);
        } else if (options.method.toLowerCase() == 'post') { //请求为post
            xhr.open(options.method, options.url, options.async);
            if (options.type === 'urlencoded') { //请求
                xhr.setRequestHeader('Content-type', 'application/x-www-form-urlencoded')
            } else if (options.type === 'json') {
                xhr.setRequestHeader('Content-type', 'application/json')

            }
            xhr.send(params)
        };
        //获取AJAX里返回的数据
        xhr.onreadystatechange = function() {
            if (xhr.readyState === 4 && xhr.status === 200) {
                options.success(xhr.responseText)
            } else {
                options.error();
            }
        };
    };
    jQuery.extend = function() {
        var target = arguments[0];
        for (var i = 0; i < arguments.length; i++) {
            for (var k in arguments[i]) {
                target[k] = arguments[i][k];
            }
        }
        return target;
    };
    jQuery.fromsParams = function(data) {
        var arr = [];
        for (var key in data) {
            arr.push(key + "=" + data[key])
        }
        return arr.join("&");
    };
    jQuery.extend1 = function() {
        var target = arguments[0];
        for (var i = 1; i < arguments.length; i++) {
            for (var k in arguments[i]) {
                target[k] = arguments[i][k];
            }
        }
        return target;
    };
    jQuery.fromsParams1 = function(data) {
        var arr = [];
        for (var k in data) {
            arr.push(k + "=" + data[k]);
        }
        return arr.join("&");
    }
    jQuery.prototype.init.prototype = jQuery.prototype;

})(window)