(function(window) {
    var jQuery = function(selector, context) {
        return new jQuery.fn.init(selector, context);
    }
    jQuery.fn = jQuery.prototype = {
            constructor: jQuery,

            init: function(selector, context) {
                context = context || document;
                context = context.nodeType ? context : context[0];
                this.length = 0;
                if (!selector) {
                    return this;
                }
                //判断传的是不是字符串
                if (typeof selector === 'string') {
                    //判断传的是不是HTML标签
                    if (selector[0] === '<' && selector.length >= 3 && selector[selector.length - 1] === ">") {
                        var oDiv = document.createElement('div');
                        oDiv.innerHTML = selector;
                        this[0] = oDiv.firstChild || oDiv.firstElementChild;
                        this.length = 1;
                        //判断传的是不是id名
                    } else if (selector[0] === "#" && this.strNum(selector, "#") === 1 && this.strNum(selector, " ") === 0) {
                        var dom = context.getElementById(selector.slice(1));
                        if (dom) {
                            this[0] = dom;
                            this.length = 1;
                        }
                    } else { //其他
                        var eles = context.querySelectorAll(selector);
                        for (var i = 0; i < eles.length; i++) {
                            this.push(eles[i]);
                        }
                    }
                } else if (selector.nodeType) {
                    this[0] = selector;
                    this.length = 1;
                } else if (selector instanceof jQuery) {
                    return selector;
                } else {
                    return this;
                }
            },
            //检测字符在字符串中出现的次数
            strNum: function(str, char) {
                var count = 0;
                for (var i = 0; i < str.length; i++) {
                    if (str[i] === char) {
                        count++;
                    }
                }
                return count;
            },
            //push方法
            push: function(content) {
                Array.prototype.push.call(this, content);
            },
            //遍历jquery对象
            each: function(fn) {
                for (var i = 0; i < this.length; i++) {
                    fn.call(this[i], i, this[i]);
                }
            },
            //转为dom对象
            get: function(index) {
                return this[index];
            },
            //找下标
            eq: function(index) {
                return jQuery(this.get(index));
            },
            //html内容
            html: function(content) {
                if (content) {
                    this.each(function(i, item) {
                        item.innerHTML = content;
                    });
                    return this;
                } else {
                    return this[0].innerHTML;
                }
            },
            //设置css样式
            css: function(pName, pValue) {
                if (pValue) {
                    this.each(function(i, v) {
                        v.style[pValue] = pValue;
                    });
                    return this;
                } else {
                    return getComputedStyle(this[0])[pName];
                }
            },
            //on方法{事件绑定}
            on: function(type) {
                var arg = Array.prototype.slice.call(arguments, 1);
                var str, callback, data;
                arg.forEach(function(item) {
                    typeof item === 'string' ? str = item : typeof item === 'function' ?
                        callback = item : item.toString() === '[object Object]' ? data = item : null;
                });
                //事件处理函数
                function run(e) {
                    e.data = data;
                    var tar = e.target;
                    if (str) {
                        $(str, this).each(function(i, item) {
                            if (tar === item) {
                                callback && callback.call(tar, e);
                                return;
                            };
                        })
                    } else {
                        callback && callback.call(tar, e);
                    }
                };
                //通过判断str参数，有该参数通过事件委托方式去添加
                if (str) {
                    this[0].addEventListener(type, run);
                } else {
                    this.each(function(i, item) {
                        item.addEventListener(type, run);
                    })
                }
            },
            //添加class样式
            addClass: function(cName) {
                var that = this;
                cName = cName.split(" ");
                cName.forEach(function(cssName) {
                    that.each(function(i, item) {
                        item.classList.add(cssName);
                    })
                })
                return this;
            },
            //删除class样式
            removeClass: function(cName) {
                this.each(function(i, item) {
                    item.classList.remove(cName);
                })
                return this;
            },
            //显示
            show: function() {
                this.each(function(index, el) {
                    el.style.display = "block";
                })
            },
            //隐藏
            hide: function() {
                this.each(function(index, el) {
                    el.style.display = "none";
                })
            },
            //获取上下左右的距离
            offset: function() {
                var l = this[0].offsetLeft;
                var t = this[0].offsetTop;
                var p = this[0].offsetParent;
                while (p) {
                    l += p.offsetLeft + p.clientLeft;
                    t += p.offsetTop + p.clientTop;
                    p = p.offsetParent;
                }
                return { left: l, top: t };
            },
            //距离顶部的高度
            scrollTop: function() {
                var scrollT;
                if (window.pageYOffset) {
                    scrollT = window.pageYOffset;
                } else if (document.compatMode) {
                    scrollT = document.documentElement.scrollTop;
                } else if (document.body) {
                    scrollT = document.body.scrollTop;
                }
                return scrollT;
            },
            innerHeight: function() {
                var oStyle = getComputedStyle(this[0]);
                var tw = parseFloat(oStyle.borderTopWidth);
                var bw = parseFloat(oStyle.borderBottomWidth);
                return this[0].offsetHeight - tw - bw;
            },
        }
        //ajax请求
    jQuery.ajax = function(options) {
        var defObj = {
            url: "", //请求地址
            method: "get", //请求方式
            async: true, //是否异步
            type: "json",
            data: null,
            success: function() {}, //成功
            error: function() {} //失败
        }
        options = this.extend({}, defObj, options);
        var params = this.formsParams(options.data);

        //创建xhr对象
        var xhr = window.XMLHttpRequest ? new window.XMLHttpRequest() : new ActiveXObject("Microsoft.XMLHTTP");
        //建立请求
        if (options.method.toLowerCase() == "get") {
            xhr.open(options.method, options.url + '?' + params, options.async);
            xhr.send(null);
        } else if (options.method.toLowerCase() == "post") {
            xhr.open(options.method, options.url, options.async);
            if (options.type === "urlencoded") {
                xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
            } else if (options.type == "json") {
                xhr.setRequestHeader("Content-type", "application/json");
            }
            xhr.send(params);
        }
        //获取ajax返回数据
        xhr.onreadystatechange = function() {
            if (xhr.readyState === 4 && xhr.status === 200) {
                options.success(xhr.responseText);
            } else {
                options.error();
            }
        }
    };
    //将对象转为字符串
    jQuery.formsParams = function(data) {
        var arr = [];
        for (var key in data) {
            arr.push(key + "=" + data[key]);
        }
        return arr.join('&');
    };
    //实现对象的扩展，后面的对象覆盖前面的对象
    jQuery.extend = function() {
        var target = arguments[0];
        for (var i = 1; i < arguments.length; i++) {
            for (var key in arguments[i]) {
                target[key] = arguments[i][key];
            }
        }
        return target;
    };
    jQuery.prototype.init.prototype = jQuery.prototype;
    window.jQuery = window.$ = jQuery;
})(window)